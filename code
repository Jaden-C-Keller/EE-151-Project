int motor[4];//array for PWM ports controlling motors
int encPort = 24;
float counter = 0.0;
int lastValue;
int newValue;
boolean done = true;

void setup() {
  for(int i = 1; i<=4; i++){
    Serial.begin(9600);
    motor[i] = i+3; //sets motor control values to port numbers
    pinMode(encPort, INPUT);//sets encoder ports to input
    pinMode(motor[i], OUTPUT);//sets motor ports to output
    lastValue = digitalRead(encPort);
  }
}

void loop() {
  if(done){
    linear(0.75);
    Encoder(cm(20.0));
    pause();
    done = false;
  }
}


void linear(float speed){//linear movement
  leftMotor(speed);//positive value for forward
  rightMotor(speed);//negative for backward
}


void turn(float speed){//turn about center
    rightMotor(-speed);//positive for cw
    leftMotor(speed);//negative for cc
}

  
void rightMotor(float speed){//control right motor
  if(speed > 0){             //positive value for "forward"
    analogWrite(motor[1], percent(speed));
    analogWrite(motor[2], 0);
  }
  else if(speed < 0){        //negative value for "backward"
    analogWrite(motor[1], 0);
    analogWrite(motor[2], percent(speed));  
  }
  else{                      //0 value for stop
    analogWrite(motor[1], 0);
    analogWrite(motor[2], 0);
  }
}


void leftMotor(float speed){//control left motor
  if(speed > 0){            //positive value for "forward"
    analogWrite(motor[3], percent(speed));
    analogWrite(motor[4], 0);
  }
  else if(speed < 0){        //negative value for "backward"
    analogWrite(motor[3], 0);
    analogWrite(motor[4], percent(speed));  
  }
  else{                     //0 value for stop
    analogWrite(motor[3], 0);
    analogWrite(motor[4], 0);
  }  
}

void Encoder(float distance){
 while(abs(counter)<distance){
   newValue = digitalRead(encPort);
     if(newValue != lastValue){
         counter++;
     }
   lastValue = newValue;
 Serial.println(counter);
 }
 counter = 0;
}


int percent(float speed){//convert percentage to analog units
  return speed * 255.0;
}

float cm(float distance){//convert raw counter to centimeters
  return distance*2.35;
}

float degree(float distance){//conver raw counter to degrees
  return 0;
}

void pause(){
  rightMotor(0);
  leftMotor(0);
}


void timer(float seconds){//convert normal dealy to seconds
  delay(seconds*1000);  
}
